"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-to-jsx-runtime@2.3.6";
exports.ids = ["vendor-chunks/hast-util-to-jsx-runtime@2.3.6"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toJsxRuntime: () => (/* binding */ toJsxRuntime)\n/* harmony export */ });\n/* harmony import */ var comma_separated_tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! comma-separated-tokens */ \"(ssr)/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js\");\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-whitespace */ \"(ssr)/./node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! property-information */ \"(ssr)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/index.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! property-information */ \"(ssr)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/find.js\");\n/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! property-information */ \"(ssr)/./node_modules/.pnpm/property-information@7.0.0/node_modules/property-information/lib/hast-to-react.js\");\n/* harmony import */ var space_separated_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! space-separated-tokens */ \"(ssr)/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js\");\n/* harmony import */ var style_to_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-to-js */ \"(ssr)/./node_modules/.pnpm/style-to-js@1.1.16/node_modules/style-to-js/cjs/index.js\");\n/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-position */ \"(ssr)/./node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vfile-message */ \"(ssr)/./node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js\");\n/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */ \n\n\n\n\n\n\n\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty;\n/** @type {Map<string, number>} */ const emptyMap = new Map();\nconst cap = /[A-Z]/g;\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they donâ€™t do here, so we remove all of\n// that.\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set([\n    \"table\",\n    \"tbody\",\n    \"thead\",\n    \"tfoot\",\n    \"tr\"\n]);\nconst tableCellElement = new Set([\n    \"td\",\n    \"th\"\n]);\nconst docs = \"https://github.com/syntax-tree/hast-util-to-jsx-runtime\";\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */ function toJsxRuntime(tree, options) {\n    if (!options || options.Fragment === undefined) {\n        throw new TypeError(\"Expected `Fragment` in options\");\n    }\n    const filePath = options.filePath || undefined;\n    /** @type {Create} */ let create;\n    if (options.development) {\n        if (typeof options.jsxDEV !== \"function\") {\n            throw new TypeError(\"Expected `jsxDEV` in options when `development: true`\");\n        }\n        create = developmentCreate(filePath, options.jsxDEV);\n    } else {\n        if (typeof options.jsx !== \"function\") {\n            throw new TypeError(\"Expected `jsx` in production options\");\n        }\n        if (typeof options.jsxs !== \"function\") {\n            throw new TypeError(\"Expected `jsxs` in production options\");\n        }\n        create = productionCreate(filePath, options.jsx, options.jsxs);\n    }\n    /** @type {State} */ const state = {\n        Fragment: options.Fragment,\n        ancestors: [],\n        components: options.components || {},\n        create,\n        elementAttributeNameCase: options.elementAttributeNameCase || \"react\",\n        evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n        filePath,\n        ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n        passKeys: options.passKeys !== false,\n        passNode: options.passNode || false,\n        schema: options.space === \"svg\" ? property_information__WEBPACK_IMPORTED_MODULE_1__.svg : property_information__WEBPACK_IMPORTED_MODULE_1__.html,\n        stylePropertyNameCase: options.stylePropertyNameCase || \"dom\",\n        tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n    };\n    const result = one(state, tree, undefined);\n    // JSX element.\n    if (result && typeof result !== \"string\") {\n        return result;\n    }\n    // Text node or something that turned into nothing.\n    return state.create(tree, state.Fragment, {\n        children: result || undefined\n    }, undefined);\n}\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function one(state, node, key) {\n    if (node.type === \"element\") {\n        return element(state, node, key);\n    }\n    if (node.type === \"mdxFlowExpression\" || node.type === \"mdxTextExpression\") {\n        return mdxExpression(state, node);\n    }\n    if (node.type === \"mdxJsxFlowElement\" || node.type === \"mdxJsxTextElement\") {\n        return mdxJsxElement(state, node, key);\n    }\n    if (node.type === \"mdxjsEsm\") {\n        return mdxEsm(state, node);\n    }\n    if (node.type === \"root\") {\n        return root(state, node, key);\n    }\n    if (node.type === \"text\") {\n        return text(state, node);\n    }\n}\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function element(state, node, key) {\n    const parentSchema = state.schema;\n    let schema = parentSchema;\n    if (node.tagName.toLowerCase() === \"svg\" && parentSchema.space === \"html\") {\n        schema = property_information__WEBPACK_IMPORTED_MODULE_1__.svg;\n        state.schema = schema;\n    }\n    state.ancestors.push(node);\n    const type = findComponentFromName(state, node.tagName, false);\n    const props = createElementProps(state, node);\n    let children = createChildren(state, node);\n    if (tableElements.has(node.tagName)) {\n        children = children.filter(function(child) {\n            return typeof child === \"string\" ? !(0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_2__.whitespace)(child) : true;\n        });\n    }\n    addNode(state, props, type, node);\n    addChildren(props, children);\n    // Restore.\n    state.ancestors.pop();\n    state.schema = parentSchema;\n    return state.create(node, type, props, key);\n}\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function mdxExpression(state, node) {\n    if (node.data && node.data.estree && state.evaluater) {\n        const program = node.data.estree;\n        const expression = program.body[0];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(expression.type === \"ExpressionStatement\");\n        // Assume result is a child.\n        return /** @type {Child | undefined} */ state.evaluater.evaluateExpression(expression.expression);\n    }\n    crashEstree(state, node.position);\n}\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function mdxEsm(state, node) {\n    if (node.data && node.data.estree && state.evaluater) {\n        // Assume result is a child.\n        return /** @type {Child | undefined} */ state.evaluater.evaluateProgram(node.data.estree);\n    }\n    crashEstree(state, node.position);\n}\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function mdxJsxElement(state, node, key) {\n    const parentSchema = state.schema;\n    let schema = parentSchema;\n    if (node.name === \"svg\" && parentSchema.space === \"html\") {\n        schema = property_information__WEBPACK_IMPORTED_MODULE_1__.svg;\n        state.schema = schema;\n    }\n    state.ancestors.push(node);\n    const type = node.name === null ? state.Fragment : findComponentFromName(state, node.name, true);\n    const props = createJsxElementProps(state, node);\n    const children = createChildren(state, node);\n    addNode(state, props, type, node);\n    addChildren(props, children);\n    // Restore.\n    state.ancestors.pop();\n    state.schema = parentSchema;\n    return state.create(node, type, props, key);\n}\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function root(state, node, key) {\n    /** @type {Props} */ const props = {};\n    addChildren(props, createChildren(state, node));\n    return state.create(node, state.Fragment, props, key);\n}\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */ function text(_, node) {\n    return node.value;\n}\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */ function addNode(state, props, type, node) {\n    // If this is swapped out for a component:\n    if (typeof type !== \"string\" && type !== state.Fragment && state.passNode) {\n        props.node = node;\n    }\n}\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */ function addChildren(props, children) {\n    if (children.length > 0) {\n        const value = children.length > 1 ? children : children[0];\n        if (value) {\n            props.children = value;\n        }\n    }\n}\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */ function productionCreate(_, jsx, jsxs) {\n    return create;\n    /** @type {Create} */ function create(_, type, props, key) {\n        // Only an array when there are 2 or more children.\n        const isStaticChildren = Array.isArray(props.children);\n        const fn = isStaticChildren ? jsxs : jsx;\n        return key ? fn(type, props, key) : fn(type, props);\n    }\n}\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */ function developmentCreate(filePath, jsxDEV) {\n    return create;\n    /** @type {Create} */ function create(node, type, props, key) {\n        // Only an array when there are 2 or more children.\n        const isStaticChildren = Array.isArray(props.children);\n        const point = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_4__.pointStart)(node);\n        return jsxDEV(type, props, key, isStaticChildren, {\n            columnNumber: point ? point.column - 1 : undefined,\n            fileName: filePath,\n            lineNumber: point ? point.line : undefined\n        }, undefined);\n    }\n}\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */ function createElementProps(state, node) {\n    /** @type {Props} */ const props = {};\n    /** @type {string | undefined} */ let alignValue;\n    /** @type {string} */ let prop;\n    for(prop in node.properties){\n        if (prop !== \"children\" && own.call(node.properties, prop)) {\n            const result = createProperty(state, prop, node.properties[prop]);\n            if (result) {\n                const [key, value] = result;\n                if (state.tableCellAlignToStyle && key === \"align\" && typeof value === \"string\" && tableCellElement.has(node.tagName)) {\n                    alignValue = value;\n                } else {\n                    props[key] = value;\n                }\n            }\n        }\n    }\n    if (alignValue) {\n        // Assume style is an object.\n        const style = /** @type {Style} */ props.style || (props.style = {});\n        style[state.stylePropertyNameCase === \"css\" ? \"text-align\" : \"textAlign\"] = alignValue;\n    }\n    return props;\n}\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */ function createJsxElementProps(state, node) {\n    /** @type {Props} */ const props = {};\n    for (const attribute of node.attributes){\n        if (attribute.type === \"mdxJsxExpressionAttribute\") {\n            if (attribute.data && attribute.data.estree && state.evaluater) {\n                const program = attribute.data.estree;\n                const expression = program.body[0];\n                (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(expression.type === \"ExpressionStatement\");\n                const objectExpression = expression.expression;\n                (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(objectExpression.type === \"ObjectExpression\");\n                const property = objectExpression.properties[0];\n                (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(property.type === \"SpreadElement\");\n                Object.assign(props, state.evaluater.evaluateExpression(property.argument));\n            } else {\n                crashEstree(state, node.position);\n            }\n        } else {\n            // For JSX, the author is responsible of passing in the correct values.\n            const name = attribute.name;\n            /** @type {unknown} */ let value;\n            if (attribute.value && typeof attribute.value === \"object\") {\n                if (attribute.value.data && attribute.value.data.estree && state.evaluater) {\n                    const program = attribute.value.data.estree;\n                    const expression = program.body[0];\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(expression.type === \"ExpressionStatement\");\n                    value = state.evaluater.evaluateExpression(expression.expression);\n                } else {\n                    crashEstree(state, node.position);\n                }\n            } else {\n                value = attribute.value === null ? true : attribute.value;\n            }\n            // Assume a prop.\n            props[name] = /** @type {Props[keyof Props]} */ value;\n        }\n    }\n    return props;\n}\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */ function createChildren(state, node) {\n    /** @type {Array<Child>} */ const children = [];\n    let index = -1;\n    /** @type {Map<string, number>} */ // Note: test this when Solid doesnâ€™t want to merge my upcoming PR.\n    /* c8 ignore next */ const countsByName = state.passKeys ? new Map() : emptyMap;\n    while(++index < node.children.length){\n        const child = node.children[index];\n        /** @type {string | undefined} */ let key;\n        if (state.passKeys) {\n            const name = child.type === \"element\" ? child.tagName : child.type === \"mdxJsxFlowElement\" || child.type === \"mdxJsxTextElement\" ? child.name : undefined;\n            if (name) {\n                const count = countsByName.get(name) || 0;\n                key = name + \"-\" + count;\n                countsByName.set(name, count + 1);\n            }\n        }\n        const result = one(state, child, key);\n        if (result !== undefined) children.push(result);\n    }\n    return children;\n}\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */ function createProperty(state, prop, value) {\n    const info = (0,property_information__WEBPACK_IMPORTED_MODULE_5__.find)(state.schema, prop);\n    // Ignore nullish and `NaN` values.\n    if (value === null || value === undefined || typeof value === \"number\" && Number.isNaN(value)) {\n        return;\n    }\n    if (Array.isArray(value)) {\n        // Accept `array`.\n        // Most props are space-separated.\n        value = info.commaSeparated ? (0,comma_separated_tokens__WEBPACK_IMPORTED_MODULE_6__.stringify)(value) : (0,space_separated_tokens__WEBPACK_IMPORTED_MODULE_7__.stringify)(value);\n    }\n    // React only accepts `style` as object.\n    if (info.property === \"style\") {\n        let styleObject = typeof value === \"object\" ? value : parseStyle(state, String(value));\n        if (state.stylePropertyNameCase === \"css\") {\n            styleObject = transformStylesToCssCasing(styleObject);\n        }\n        return [\n            \"style\",\n            styleObject\n        ];\n    }\n    return [\n        state.elementAttributeNameCase === \"react\" && info.space ? property_information__WEBPACK_IMPORTED_MODULE_8__.hastToReact[info.property] || info.property : info.attribute,\n        value\n    ];\n}\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */ function parseStyle(state, value) {\n    try {\n        return style_to_js__WEBPACK_IMPORTED_MODULE_0__(value, {\n            reactCompat: true\n        });\n    } catch (error) {\n        if (state.ignoreInvalidStyle) {\n            return {};\n        }\n        const cause = /** @type {Error} */ error;\n        const message = new vfile_message__WEBPACK_IMPORTED_MODULE_9__.VFileMessage(\"Cannot parse `style` attribute\", {\n            ancestors: state.ancestors,\n            cause,\n            ruleId: \"style\",\n            source: \"hast-util-to-jsx-runtime\"\n        });\n        message.file = state.filePath || undefined;\n        message.url = docs + \"#cannot-parse-style-attribute\";\n        throw message;\n    }\n}\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */ function findComponentFromName(state, name, allowExpression) {\n    /** @type {Identifier | Literal | MemberExpression} */ let result;\n    if (!allowExpression) {\n        result = {\n            type: \"Literal\",\n            value: name\n        };\n    } else if (name.includes(\".\")) {\n        const identifiers = name.split(\".\");\n        let index = -1;\n        /** @type {Identifier | Literal | MemberExpression | undefined} */ let node;\n        while(++index < identifiers.length){\n            /** @type {Identifier | Literal} */ const prop = (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_10__.name)(identifiers[index]) ? {\n                type: \"Identifier\",\n                name: identifiers[index]\n            } : {\n                type: \"Literal\",\n                value: identifiers[index]\n            };\n            node = node ? {\n                type: \"MemberExpression\",\n                object: node,\n                property: prop,\n                computed: Boolean(index && prop.type === \"Literal\"),\n                optional: false\n            } : prop;\n        }\n        (0,devlop__WEBPACK_IMPORTED_MODULE_3__.ok)(node, \"always a result\");\n        result = node;\n    } else {\n        result = (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_10__.name)(name) && !/^[a-z]/.test(name) ? {\n            type: \"Identifier\",\n            name\n        } : {\n            type: \"Literal\",\n            value: name\n        };\n    }\n    // Only literals can be passed in `components` currently.\n    // No identifiers / member expressions.\n    if (result.type === \"Literal\") {\n        const name = /** @type {string | number} */ result.value;\n        return own.call(state.components, name) ? state.components[name] : name;\n    }\n    // Assume component.\n    if (state.evaluater) {\n        return state.evaluater.evaluateExpression(result);\n    }\n    crashEstree(state);\n}\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */ function crashEstree(state, place) {\n    const message = new vfile_message__WEBPACK_IMPORTED_MODULE_9__.VFileMessage(\"Cannot handle MDX estrees without `createEvaluater`\", {\n        ancestors: state.ancestors,\n        place,\n        ruleId: \"mdx-estree\",\n        source: \"hast-util-to-jsx-runtime\"\n    });\n    message.file = state.filePath || undefined;\n    message.url = docs + \"#cannot-handle-mdx-estrees-without-createevaluater\";\n    throw message;\n}\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */ function transformStylesToCssCasing(domCasing) {\n    /** @type {Style} */ const cssCasing = {};\n    /** @type {string} */ let from;\n    for(from in domCasing){\n        if (own.call(domCasing, from)) {\n            cssCasing[transformStyleToCssCasing(from)] = domCasing[from];\n        }\n    }\n    return cssCasing;\n}\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */ function transformStyleToCssCasing(from) {\n    let to = from.replace(cap, toDash);\n    // Handle `ms-xxx` -> `-ms-xxx`.\n    if (to.slice(0, 3) === \"ms-\") to = \"-\" + to;\n    return to;\n}\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */ function toDash($0) {\n    return \"-\" + $0.toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/hast-util-to-jsx-runtime@2.3.6/node_modules/hast-util-to-jsx-runtime/lib/index.js\n");

/***/ })

};
;